using System.Diagnostics.CodeAnalysis;
using System.Runtime.Serialization;
using Telegram.Bot.Types;

// ReSharper disable once CheckNamespace
namespace Telegram.Bot.Requests
{
    /// <summary>
    /// Generate a new invite link for a chat; any previously generated link is revoked.
    /// The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.
    /// There is a note for this request, look into declaration of <see cref="ExportChatInviteLinkRequest"/> class.
    /// </summary>
    ///
    /// Note: Each administrator in a chat generates their own invite links.
    /// Bots can't use invite links generated by other administrators.
    /// If you want your bot to work with invite links, it will need to generate its own link
    /// using exportChatInviteLink – after this the link will become available to the bot via the getChat method.
    /// If your bot needs to generate a new invite link replacing its previous one, use exportChatInviteLink again.
    [DataContract]
    public sealed class ExportChatInviteLinkRequest : RequestBase<string>
    {
        /// <summary>
        /// Unique identifier for the target chat or username of the target channel (in the format @channel_username)
        /// </summary>
        [DataMember(IsRequired = true), NotNull]
        public ChatId ChatId { get; }

        /// <summary>
        /// Initializes a new request of type <see cref="ExportChatInviteLinkRequest"/>
        /// </summary>
        /// <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format @channel_username)</param>
        public ExportChatInviteLinkRequest(
            [DisallowNull] ChatId chatId)
            : base("exportChatInviteLink")
        {
            ChatId = chatId;
        }
    }
}
