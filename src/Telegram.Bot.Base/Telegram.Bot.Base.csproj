<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <LangVersion>12</LangVersion>
    <Nullable>enable</Nullable>
    <EnableNETAnalyzers>True</EnableNETAnalyzers>
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
    <AnalysisLevel>latest-recommended</AnalysisLevel>
    <EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
    <PublishTrimmed>false</PublishTrimmed>
    <RootNamespace>Telegram.Bot</RootNamespace>
  </PropertyGroup>

  <PropertyGroup>
    <IsAotCompatible>true</IsAotCompatible>
  </PropertyGroup>

  <PropertyGroup Label="Package">
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <IncludeReferencedProjects>true</IncludeReferencedProjects>
    <IncludeBuildOutput>true</IncludeBuildOutput>
    <GeneratesDocumentationFile>True</GeneratesDocumentationFile>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <Title>Telegram Bot Aot Base</Title>
    <Version>1.0.0-alpha.9</Version>
    <Description>
      This package contains AOT-friendly types for Telegram.Bot.Aot. The code was originally forked from Telegram.Bot at https://github.com/TelegramBots/Telegram.Bot
    </Description>
    <PackageId>Telegram.Bot.Aot.Base</PackageId>
    <Authors>RoundRobin,Poulad,tuscen,codeinhabitant</Authors>
    <Copyright>Copyright © Robin Müller 2016</Copyright>
    <PackageIcon>package-icon.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageProjectUrl>https://github.com/codeinhabitant/Telegram.Bot.Aot</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <RepositoryUrl>https://github.com/codeinhabitant/Telegram.Bot.Aot.git</RepositoryUrl>
    <PackageTags>Telegram;Bot;Api;Payment;Inline;Games</PackageTags>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>
      $(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb
    </AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <PropertyGroup Label="Warnings">
    <NoWarn>$(NoWarn);CA1003</NoWarn> <!-- Change the event name to replace the type with a generic EventHandler,
                                           for example EventHandler<T>, where T is a valid EventArgs -->
    <NoWarn>$(NoWarn);CA1819</NoWarn> <!-- Properties should not return arrays-->
    <NoWarn>$(NoWarn);CA1008</NoWarn> <!-- Add a member to enum that has a value of zero with a suggested
                                           name of 'None' -->
    <NoWarn>$(NoWarn);CA1056</NoWarn> <!-- Change the type of property from 'string' to 'System.Uri' -->
    <NoWarn>$(NoWarn);CA1711</NoWarn> <!-- Rename type name so that it does not end in 'Stream' -->
    <NoWarn>$(NoWarn);CA1040</NoWarn> <!-- Avoid empty interfaces-->
    <NoWarn>$(NoWarn);CA1822</NoWarn> <!-- Member does not access instance data and can be marked as static -->
    <NoWarn>$(NoWarn);CA2225</NoWarn> <!-- Provide a method named 'ToEntity' or 'FromString' as an alternate
                                           for operator op_Implicit -->
    <NoWarn>$(NoWarn);CA1054</NoWarn> <!-- Change the type of parameter 'url' from 'string' to 'System.Uri', or
                                           provide an overload to '(string, string)' that allows 'url' to be passed
                                           as a 'System.Uri' object -->
    <NoWarn>$(NoWarn);CA2234</NoWarn> <!-- Modify method to call
                                           'HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken)' instead
                                           of 'HttpClient.GetAsync(string, HttpCompletionOption, CancellationToken)' -->
    <NoWarn>$(NoWarn);CA1031</NoWarn> <!-- Catch a more specific allowed exception type, or rethrow the exception -->
    <NoWarn>$(NoWarn);CA1716</NoWarn> <!-- Rename virtual/interface member MessageOrigin.Date so that it no longer
                                           conflicts with the reserved language keyword 'Date' -->
    <NoWarn>$(NoWarn);CA1510</NoWarn> <!-- Use 'ArgumentNullException.ThrowIfNull' instead of explicitly throwing
                                           a new exception instance -->
    <NoWarn>$(NoWarn);MA0046</NoWarn> <!-- The delegate must return void -->
    <NoWarn>$(NoWarn);MA0048;MA0051</NoWarn>
  </PropertyGroup>

  <!-- Make build deterministic only in CI environment to make local development easier with non-trimmed paths -->
  <!-- TF_BUILD is a predefined variable in Azure Pipelines -->
  <PropertyGroup Condition="'$(TF_BUILD)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    <Deterministic>true</Deterministic>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.Text.Json" Version="8.0.3" />
  </ItemGroup>

  <ItemGroup Label="Dev">
    <PackageReference Include="IsExternalInit" Version="1.0.3" PrivateAssets="all" />
    <PackageReference Include="Required" Version="1.0.0" PrivateAssets="all" />
    <PackageReference Include="Meziantou.Analyzer" Version="2.0.150" PrivateAssets="all" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="All" />
    <PackageReference Include="JetBrains.Annotations" Version="2023.3.0" PrivateAssets="All" />
    <PackageReference Include="Nullable" Version="1.3.1" PrivateAssets="all" />
    <ProjectReference Include="..\EnumSerializer.Generator\EnumSerializer.Generator.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\package-icon.png">
      <Pack>true</Pack>
      <PackagePath>/</PackagePath>
      <Link>package-icon.png</Link>
    </None>
    <None Include="..\..\README.md">
      <Pack>true</Pack>
      <PackagePath>/</PackagePath>
      <Link>README.md</Link>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Requests\" />
  </ItemGroup>
</Project>
