using Scriban;

namespace Telegram.Bot.Gen.SourceGenerators;

internal static partial class Templates
{
    internal static class Types
    {
        public static readonly Dictionary<string, string> Mapping = new()
        {
            ["ForceReply"] = "ForceReplyMarkup"
        };

        public static readonly Template Template = Template.Parse(TemplateText);

        private const string TemplateText = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Telegram.Bot.Gen.SourceGenerators.ApiTypesGenerator source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace {{ type_namespace }};

/// <summary>
{{~ for type_description_line in type_description | string.split '\n' ~}}
/// {{ type_description_line }}
{{~ end ~}}
/// </summary>
public partial class {{ type_name }}
{
    {{~ for parameter in parameters ~}}
    {{
      func to_pascal_case(input)
        $separated = input | string.split ""_"" | array.each do
          ret $0 | string.capitalize
        end
        ret $separated | array.join """"
      end

      func get_parameter_type_name(input)
        if parameter.is_enum
          ret ""Telegram.Bot.Types.Enums."" | string.append input
        else
          ret input
        end
      end

      pascal_case_name = parameter.parameter_name | to_pascal_case
      is_required = parameter.parameter_description | !string.starts_with ""Optional""
      parameter_type_name = parameter.parameter_type_name | get_parameter_type_name
    }}
    /// <summary>
    {{~ for parameter_description_line in parameter.parameter_description | string.split '\n' ~}}
    /// {{ parameter_description_line }}
    {{~ end ~}}
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName(""{{ parameter.parameter_name }}"")]
    {{~ if !is_required ~}}
    [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
    {{~ end ~}}
    [Newtonsoft.Json.JsonProperty(""{{ parameter.parameter_name }}"", {{ if is_required ~}}Required = Newtonsoft.Json.Required.Always{{~ else ~}}DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore{{~ end ~}})]
    public {{ parameter_type_name + "" "" + pascal_case_name }} { get; set; }
    {{~ end ~}}
}";
    }
}
